load("@rules_python//python:defs.bzl", "py_test")
load("@rules_pyo3_repo//:build_defs.bzl", "pyo3_extension")
load("@io_bazel_rules_rust//cargo:cargo_build_script.bzl", "cargo_build_script")

load("@debug_deps//:requirements.bzl", "requirement")

cargo_build_script(
    name = "build_script",
    srcs = ["build.rs"],
    #crate_root = "build.rs",
)

pyo3_extension(
    #name: The name of the resulting `py_library`
    name = "orjson",
    # no pyo3 dep, have in the @rules_pyo3//:pyo3 
    # ls cargo/remote/ -l|awk -F. '{print $2}'|grep -v bazel|awk -F- '{print "\"//cargo:"$1"\","}'|grep -v "o:\""
    # should use the crates.bzl ,not in the remote
    deps = [
        "//cargo/cargo:associative_cache",
	"//cargo/cargo:bytecount",
	"//cargo/cargo:encoding_rs",
	"//cargo/cargo:inlinable_string",
	"//cargo/cargo:itoa",
	"//cargo/cargo:once_cell",
	"//cargo/cargo:ryu",
	"//cargo/cargo:serde",
	"//cargo/cargo:serde_json",
	"//cargo/cargo:smallvec",
	"//cargo/cargo:wyhash",
		    ],

    # expose py_library
    visibility = ["//visibility:public"], 
    # init file for py_library 
    init = "__init__.py",
    # other args pass to rust_library, but what pass to py_library?
    #srcs = glob(["src/*.rs"]),
    #srcs = glob(["**/*.rs"]),
    # If srcs contains more than one file, then there must be a file either named lib.rs,
    # Otherwise, crate_root must be set to the source file that is the root of the crate to be passed to rustc to build this crate.
    srcs = glob(["src/**"]),
    data = glob(["**"], exclude = ["test/**"]),

    #rules_pyo3 have set this crate_type
    #crate_type = "cdylib",    #crate_type = "lib",

    #crate_features = [
    #],
    # ofcouse  
    crate_root = "src/lib.rs",
    edition = "2018",
    version="3.4.6",
    #rustc_flags = ["-C codegen-units=256", 
    rustc_flags = ["-Ccodegen-units=256", 
		   "-Cdebug-assertions=yes",
		   "-Cdebuginfo=2", 
		   "-Cforce-frame-pointers=yes" ,
		   "-Cincremental=y",
		   "-Copt-level=0",
		   "-Coverflow-checks=y",
		   "-Cpanic=unwind", 
		   "-Crpath=no" ,
		   "-Clto=no",
		   "-Cforce-unwind-tables=yes",
		  ]

    
    #tags = ["
)
py_test(
    name = "test_orjson",
    srcs = ["testor.py"],
    main = "testor.py",
    deps = [":orjson",
            requirement("pympler"),
	    ],
    python_version ="PY3",
    #toolchians = ["@python//:python3_toolchain"],
)
# py_library data import deps 

#load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library", "rust_test")
#load("@io_bazel_rules_rust//cargo:cargo_build_script.bzl", "cargo_build_script")
#load("@bazel_skylib//lib:selects.bzl", "selects")
#load("//rslib:rustfmt.bzl", "rustfmt_fix", "rustfmt_test")

# create pyo3 extension
#rust_library(
#    name = "rsbridge",
#    srcs = ["lib.rs"],
#    crate_type = "cdylib",
#    rustc_flags = selects.with_or({
#        (
#            "@io_bazel_rules_rust//rust/platform:x86_64-apple-darwin",
#        ): [
#            "-Clink-arg=-undefined",
#            "-Clink-arg=dynamic_lookup",
#            "-Clink-arg=-mmacosx-version-min=10.7",
#        ],
#        "//conditions:default": [],
#    }),
#    visibility = [
#        "//pylib:__subpackages__",
#    ],
#    deps = [
#        ":build_script",
#        # use the raze target
#        "//cargo:pyo3",
         # this the orign rslib ,but i not use as dep ,direct use it .
#        "//rslib:anki",
#	# not use the Cargo.toml
#    ],
#)

#rustfmt_test(
#    name = "format_check",
#    srcs = glob([
#        "*.rs",
#    ]),
#)

#rustfmt_fix(
#    name = "format",
#    srcs = glob([
#        "*.rs",
#    ]),
#)
